{"version":3,"sources":["components/Searchbar/Searchbar.js","components/utils/PixabayFetch.js","components/ImageGalleryItem/ImageGalleryItem.js","components/ImageGallery/ImageGallery.js","components/Button/Button.js","components/Modal/Modal.js","components/Loader/Loader.js","App.js","index.js"],"names":["Searchbar","state","search","onSubmit","e","preventDefault","trim","props","setState","alert","onChange","target","value","className","this","type","name","autocomplete","autofocus","placeholder","Component","PixabayFetch","_searchQuery","page","url","searchQuery","axios","get","then","result","catch","err","console","log","ImageGalleryItem","modalIsOpen","images","map","webformatURL","id","tags","src","alt","ImageGallery","onClick","onModalOpen","Button","handleClick","Modal","document","addEventListener","keyCode","onModalCloseByEsc","onModalClose","onKeyDown","largeImg","Loader","newPixabayFetch","App","useState","setSearch","setPage","responseData","setResponseData","status","setStatus","setModalIsOpen","setLargeImg","useEffect","window","scrollTo","top","documentElement","behavior","resetPage","searchPhotos","res","data","hits","length","p","finally","found","find","el","toString","largeImageURL","searchPage","prevState","scrollHeight","currentTarget","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.16940457.chunk.js","sourcesContent":["import { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class Searchbar extends Component {\n  state = {\n    search: '',\n  };\n\n  onSubmit = e => {\n    e.preventDefault();\n    if (this.state.search.trim() !== '') {\n      this.props.onSubmit(this.state.search);\n      this.setState({ search: '' });\n    } else alert('Add your search query');\n  };\n  onChange = e => {\n    this.setState({ search: e.target.value });\n  };\n\n  render() {\n    return (\n      <header className=\"Searchbar\">\n        <form className=\"SearchForm\" onSubmit={this.onSubmit}>\n          <button type=\"submit\" className=\"SearchForm-button\">\n            <span className=\"SearchForm-button-label\">Search</span>\n          </button>\n\n          <input\n            onChange={this.onChange}\n            name=\"searh\"\n            value={this.state.search}\n            className=\"SearchForm-input\"\n            type=\"text\"\n            autocomplete=\"off\"\n            autofocus\n            placeholder=\"Search images and photos\"\n          />\n        </form>\n      </header>\n    );\n  }\n}\n\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func,\n};\n","import axios from 'axios';\n\nexport default class PixabayFetch {\n  constructor() {\n    this._searchQuery = '';\n    this.page = 1;\n  }\n\n  get searchQuery() {\n    return this._searchQuery;\n  }\n  set searchQuery(value) {\n    return (this._searchQuery = value);\n  }\n\n  get searchPage() {\n    return this.page;\n  }\n\n  set searchPage(value) {\n    return (this.page = value);\n  }\n\n  resetPage() {\n    return (this.page = 1);\n  }\n\n  searchPhotos() {\n    const base_url = 'https://pixabay.com/api/';\n    const api_key = '23081749-b9f3d38fc4718cbd45a8beed9';\n\n    const params = `?q=${this.searchQuery}&page=${this.page}&per_page=12&image_type=photo&orientation=horizontal&key=${api_key}`;\n    const url = base_url + params;\n\n    return axios\n      .get(url)\n      .then(result => {\n        return result;\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }\n}\n\n// key 23081749-b9f3d38fc4718cbd45a8beed9\n// https://pixabay.com/api/?q=что_искать&page=номер_страницы&key=твой_ключ&image_type=photo&orientation=horizontal&per_page=12\n","import { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class ImageGalleryItem extends Component {\n  state = {\n    modalIsOpen: false,\n  };\n  render() {\n    return this.props.images.map(({ webformatURL, id, tags }) => {\n      return (\n        <li key={id} className=\"ImageGalleryItem\">\n          <img\n            id={id}\n            src={webformatURL}\n            alt={tags}\n            className=\"ImageGalleryItem-image\"\n          />\n        </li>\n      );\n    });\n  }\n}\n\nImageGalleryItem.propTypes = {\n  images: PropTypes.arrayOf(PropTypes.object),\n};\n","import { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ImageGalleryItem from '../ImageGalleryItem/ImageGalleryItem';\n\nexport default class ImageGallery extends Component {\n  render() {\n    return (\n      <>\n        <ul onClick={this.props.onModalOpen} className=\"ImageGallery\">\n          <ImageGalleryItem images={this.props.images} />\n        </ul>\n      </>\n    );\n  }\n}\n\nImageGallery.propTypes = {\n  onModalOpen: PropTypes.func,\n};\n","import { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class Button extends Component {\n  handleClick = () => {\n    return this.props.onClick(1);\n  };\n\n  render() {\n    return (\n      <button onClick={this.handleClick} className=\"Button\" type=\"button\">\n        Load More!\n      </button>\n    );\n  }\n}\n\nButton.propTypes = {\n  onClick: PropTypes.func,\n};\n","import { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class Modal extends Component {\n  componentDidMount() {\n    document.addEventListener('keyup', e => {\n      if (e.keyCode === 27) {\n        this.props.onModalCloseByEsc();\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div\n        onClick={this.props.onModalClose}\n        onKeyDown={this.props.onKeyDown}\n        className=\"Overlay\"\n      >\n        <div className=\"Modal\">\n          <img className=\"LargeGalleryImage\" src={this.props.largeImg} alt=\"\" />\n        </div>\n      </div>\n    );\n  }\n}\n\nModal.propTypes = {\n  onModalOpen: PropTypes.func,\n  onModalClose: PropTypes.func,\n  onModalCloseByEsc: PropTypes.func,\n  largeImg: PropTypes.string,\n};\n","import { Component } from 'react';\n\nexport default class Loader extends Component {\n  render() {\n    return (\n      <div className=\"lds-ellipsis\">\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n      </div>\n    );\n  }\n}\n","import { useState, useEffect } from 'react';\nimport Searchbar from './components/Searchbar/Searchbar';\nimport PixabayFetch from './components/utils/PixabayFetch';\nimport ImageGallery from './components/ImageGallery/ImageGallery';\nimport Button from './components/Button/Button';\nimport Modal from './components/Modal/Modal';\nimport Loader from './components/Loader/Loader';\n\nimport './styles.css';\n\nconst newPixabayFetch = new PixabayFetch();\n\nexport default function App() {\n  const [search, setSearch] = useState('');\n  const [page, setPage] = useState(1);\n  const [responseData, setResponseData] = useState([]);\n  const [status, setStatus] = useState('init');\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [largeImg, setLargeImg] = useState('');\n\n  useEffect(() => {\n    if (search === '') {\n      return;\n    }\n\n    window.scrollTo({\n      top: document.documentElement,\n      behavior: 'smooth',\n    });\n    newPixabayFetch.resetPage();\n    setStatus('pending');\n    setPage(1);\n\n    newPixabayFetch.searchQuery = search;\n    newPixabayFetch\n      .searchPhotos()\n      .then(res => {\n        if (res.data.hits.length !== 0) {\n          setResponseData([...res.data.hits]);\n        } else alert('Nothing to show! Change your search query');\n      })\n      .then(setPage(p => p + 1))\n      .finally(() => {\n        setStatus('success');\n      });\n  }, [search]);\n\n  const onSearchFormSubmit = search => {\n    setSearch(search);\n  };\n\n  const onClick = value => {\n    setStatus('pending');\n    setPage(page + 1);\n\n    newPixabayFetch.searchPage = page;\n    newPixabayFetch\n      .searchPhotos()\n      .then(res => {\n        setResponseData(prevState => [...prevState, ...res.data.hits]);\n      })\n      .catch(err => {\n        console.log(err);\n      })\n      .finally(() => {\n        setStatus('success');\n        window.scrollTo({\n          top: document.documentElement.scrollHeight - 1200,\n          behavior: 'smooth',\n        });\n      });\n  };\n\n  const onModalOpen = e => {\n    const found = responseData.find(el => el.id.toString() === e.target.id);\n\n    setModalIsOpen(!modalIsOpen);\n    setLargeImg(found.largeImageURL);\n  };\n\n  const onModalClose = e => {\n    if (\n      e.target.className === 'Overlay' &&\n      e.currentTarget.className === 'Overlay'\n    ) {\n      setModalIsOpen(!modalIsOpen);\n    }\n  };\n\n  const onModalCloseByEsc = () => {\n    setModalIsOpen(false);\n  };\n\n  return (\n    <>\n      <Searchbar onSubmit={onSearchFormSubmit} />\n      <ImageGallery images={responseData} onModalOpen={onModalOpen} />\n      {status === 'pending' && <Loader />}\n      {responseData.length > 0 && <Button onClick={onClick} />}\n      {modalIsOpen && (\n        <Modal\n          onModalOpen={onModalOpen}\n          onModalClose={onModalClose}\n          onModalCloseByEsc={onModalCloseByEsc}\n          largeImg={largeImg}\n        />\n      )}\n    </>\n  );\n}\n\n// class oldApp {\n//   state = {\n//     search: '',\n//     page: 1,\n//     responseData: [],\n//     status: 'init',\n//     modalIsOpen: false,\n//     largeImg: '',\n//   };\n\n//   componentDidUpdate(prevProps, prevState) {\n//     if (prevState.search !== this.state.search) {\n//       window.scrollTo({\n//         top: document.documentElement,\n//         behavior: 'smooth',\n//       });\n//       newPixabayFetch.resetPage();\n//       this.setState({ status: 'pending', page: 1 });\n\n//       newPixabayFetch.searchQuery = this.state.search;\n//       newPixabayFetch\n//         .searchPhotos()\n//         .then(res => {\n//           if (res.data.hits.length !== 0) {\n//             this.setState({ responseData: [...res.data.hits] });\n//           } else alert('Nothing to show! Change your search query');\n//         })\n//         .then(\n//           this.setState(prevState => ({\n//             page: prevState.page + 1,\n//           })),\n//         )\n//         .finally(() => {\n//           this.setState({ status: 'success' });\n//         });\n//     }\n//   }\n\n//   onSearchFormSubmit = search => {\n//     this.setState({ search });\n//   };\n//   onClick = value => {\n//     this.setState(prevState => ({\n//       page: prevState.page + 1,\n//       status: 'pending',\n//     }));\n//     newPixabayFetch.searchPage = this.state.page;\n//     newPixabayFetch\n//       .searchPhotos()\n//       .then(res => {\n//         this.setState(prevState => ({\n//           responseData: [...prevState.responseData, ...res.data.hits],\n//         }));\n//       })\n//       .catch(err => {\n//         console.log(err);\n//       })\n//       .finally(() => {\n//         this.setState({ status: 'success' });\n//         window.scrollTo({\n//           top: document.documentElement.scrollHeight - 1200,\n//           behavior: 'smooth',\n//         });\n//       });\n//   };\n\n//   onModalOpen = e => {\n//     const found = this.state.responseData.find(\n//       el => el.id.toString() === e.target.id,\n//     );\n\n//     this.setState(prevState => ({\n//       modalIsOpen: !prevState.modalIsOpen,\n//       largeImg: found.largeImageURL,\n//     }));\n//   };\n\n//   onModalClose = e => {\n//     if (\n//       e.target.className === 'Overlay' &&\n//       e.currentTarget.className === 'Overlay'\n//     ) {\n//       this.setState(prevState => ({\n//         modalIsOpen: !prevState.modalIsOpen,\n//       }));\n//     }\n//   };\n\n//   onModalCloseByEsc = () => {\n//     this.setState({ modalIsOpen: false });\n//   };\n\n//   render() {\n//     return (\n//       <>\n//         <Searchbar onSubmit={this.onSearchFormSubmit} />\n//         <ImageGallery\n//           images={this.state.responseData}\n//           onModalOpen={this.onModalOpen}\n//         />\n//         {this.state.status === 'pending' && <Loader />}\n//         {this.state.responseData.length > 0 && (\n//           <Button onClick={this.onClick} />\n//         )}\n//         {this.state.modalIsOpen && (\n//           <Modal\n//             onModalOpen={this.onModalOpen}\n//             onModalClose={this.onModalClose}\n//             onModalCloseByEsc={this.onModalCloseByEsc}\n//             largeImg={this.state.largeImg}\n//           />\n//         )}\n//       </>\n//     );\n//   }\n// }\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}